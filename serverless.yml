service: delivery-serverless-aws

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  environment:
    REGION: ${self:provider.region}
    PENDING_ORDERS_QUEUE:
      Ref: PendingOrdersQueue
    PENDING_ORDERS_QUEUE_NAME: PendingOrdersQueue
    COMPLETED_ORDER_TABLE: CompletedOrderTable
  
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource: "arn:aws:sqs:${self:provider.region}:*:${self:provider.environment.PENDING_ORDERS_QUEUE_NAME}"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETED_ORDER_TABLE}"

functions:
  makeOrder:  # AWS Lambda
    handler: handler.makeOrder
    events:
      - http: # API Gateway
          method: post
          path: order
  prepareOrder:
    handler: handler.prepareOrder
    events:
      - sqs:
          arn: # Amazon Resource Name
            Fn::GetAtt:
              - PendingOrdersQueue
              - Arn
          batchSize: 1 

resources:
  Resources:
    PendingOrdersQueue: # SQS Queue Name
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.PENDING_ORDERS_QUEUE_NAME}"
    CompletedOrdersTable:               # Resource Name
      Type: "AWS::DynamoDB::Table"      # Resource Type
      Properties:
        AttributeDefinitions:       
        - AttributeName: "orderId"      # Key Database
          AttributeType: "S"
        KeySchema:
        - AttributeName: "orderId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.COMPLETED_ORDER_TABLE}